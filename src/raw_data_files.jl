## ----------------  Individual files

# AFQT percentile by quality
raw_afqt_pct_qual(ds :: DataSettings) =
    RawDataFile(:selfReport, :freshmen, :mean, "pctile_afqt.dat");

# By quality / gpa
raw_grad_rate_qual_gpa(ds :: DataSettings) = 
    RawDataFile(:transcript, :progress, :mean, "grad_rate.dat");
# Transcript time to drop contains a 0 in one cell
raw_time_to_drop_qual_gpa(ds :: DataSettings) = 
    RawDataFile(:transcript, :progress, :mean, "time_to_drop.dat");
raw_time_to_grad_qual_gpa(ds :: DataSettings) = 
    RawDataFile(:transcript, :progress, :mean, "time_to_grad.dat");
raw_work_hours_qual_gpa(ds :: DataSettings, year :: Integer) = 
    RawDataFile(:selfReport, :finance, :mean, "hours$year.dat")
raw_net_price_qual_gpa(ds :: DataSettings, year :: Integer) =
    RawDataFile(:transcript, :finance, :mean, "net_price$year.dat");
raw_credits_taken_qual_gpa(ds :: DataSettings, year :: Integer) = 
    RawDataFile(:transcript, :progress, :mean, "creds_att$year.dat");

# -----  By quality / parental

raw_work_hours_qual_parental(ds :: DataSettings) =
    RawDataFile(:selfReport, :finance, :mean, "hours_byfaminc1.dat");
# Conditional on entry, fraction of students in each [quality, parental] cell
raw_entry_qual_parental(ds :: DataSettings) =
    RawDataFile(:transcript, :freshmen, :mean, "jointdist_qual_inc.dat");
raw_frac_grad_qual_parental(ds :: DataSettings) =
    RawDataFile(:transcript, :progress, :mean, "grad_rate_inc.dat");
raw_time_to_grad_qual_parental(ds :: DataSettings) =
    RawDataFile(:transcript, :progress, :mean, "time_to_grad_inc.dat");


# ------  by [gpa, parental]
# Data files have this transposed as [parental, gpa]

# Entry rates [gpa, parental], but TRANSPOSED in data files!
raw_entry_gpa_parental(ds :: DataSettings) =
    RawDataFile(:transcript, :hsGrads, :mean, "entrants.dat");
# Fraction by quality, by [gpa, parental], TRANSPOSED in data files.
# Conditional on entry.
raw_qual_entry_gpa_parental(ds :: DataSettings, iCollege) =
    RawDataFile(:transcript, :freshmen, :mean, "prob_ent_$(iCollege).dat");
# Mass of HSG by [parental, hs gpa]
raw_mass_gpa_parental(ds :: DataSettings) =
    RawDataFile(:transcript, :hsGrads, :mean, "jointdist_inc_afqt_hsgrads.dat");

raw_cum_loans_qual_year(ds :: DataSettings, year :: Integer) = 
    RawDataFile(:transcript, :finance, :mean, "cumloans$year.dat");

# Conditional on entry, fraction of students in each [quality, gpa] cell
raw_mass_entry_qual_gpa(ds :: DataSettings) =
    RawDataFile(:transcript, :freshmen, :mean, "jointdist_qual_afqt.dat");


# -----  Regressions

# Wage regressions pooling school groups. Self reports only.
raw_wage_regr(ds :: DataSettings) = 
    RawDataFile(:selfReport, :none, :regression, "loginc_reg3.dat");

# Wage regression for graduates with college quality coefficients
raw_wage_regr_grads(ds :: DataSettings) = 
    RawDataFile(:selfReport, :none, :regression, "loginc_reg2.dat");

raw_transfer_regr(ds :: DataSettings) = 
    RawDataFile(:transcript, :none, :regression, "parental_transfers1_reg1.dat");

raw_tuition_regr(ds :: DataSettings) = 
    RawDataFile(:transcript, :none, :regression, "net_price1_reg1.dat");


## ---------  Methods

# Mapping from characteristics to directory names
dSelfTranscript = Dict([:selfReport => "SelfReport",  :transcript => "Transcripts"]);

dMomentType = Dict([:mean => "Means",  :count => "Counts",  :std => "StandardDeviations", 
	:regression => "Regressions"]);

dGroup = Dict([:finance => "Financing",  :freshmen => "Fresh_Char",
	:hsGrads => "HS_Char",  :progress => "Progress",  :none => ""]);


# Raw data files live here; generated by Oksana
raw_data_base_dir() = 
	"/Users/lutz/Dropbox/Dropout Policies/Data/empiricaltargets/NLSY 97 moments by AFQT";

# Raw data dir with characteristics of each moment
raw_data_dir(rf :: RawDataFile) = 
	raw_data_dir(rf.selfOrTranscript, rf.momentType, rf.group);

function raw_data_dir(selfReportOrTranscript :: Symbol,  momentType :: Symbol, 
	momentGroup :: Symbol)
	
	rawPath = joinpath(raw_data_base_dir(),  
		data_sub_dir(selfReportOrTranscript, momentType, momentGroup));
	@assert isdir(rawPath)  "Directory not found: $rawPath"
	return rawPath
end

"""
	$(SIGNATURES)

Path for a raw data file.
"""
data_file(rf :: RawDataFile) =
	joinpath(data_dir(), data_sub_dir(rf), file_name(rf));

# Subdir relative to `raw_data_base_dir` or `data_dir`
data_sub_dir(rf :: RawDataFile) =
	data_sub_dir(rf.selfOrTranscript, rf.momentType, rf.group);

data_sub_dir(selfReportOrTranscript :: Symbol,  momentType :: Symbol, 
	momentGroup :: Symbol) =
    joinpath(dSelfTranscript[selfReportOrTranscript],  "dat_files", 
		dMomentType[momentType],  dGroup[momentGroup])

file_name(rf :: RawDataFile) = rf.rawFile;

"""
    $(SIGNATURES)

Copy raw data files from Dropbox to local dir.
This only needs to be done when data files get updated.
Not all moments have raw data files. Those are skipped.
"""
function copy_raw_data_files(; trialRun :: Bool = false)
    println("\nCopying raw data files to local dir");
    srcDir = raw_data_base_dir();
    tgDir = data_dir();
    rsync_dir(srcDir, tgDir;  trialRun = trialRun,  doDelete = false);
end

# ---------------